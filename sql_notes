# examples are from: https://leetcode.com/problemset/database/
# select second highest salary
solution 1:
SELECT CASE WHEN MIN(a.Salary)=MAX(a.Salary) THEN null  ELSE MIN(a.Salary) END AS SecondHighestSalary FROM 
(SELECT Employee.Salary FROM Employee ORDER BY Employee.Salary DESC LIMIT 2) a

solution 2:
SELECT max(Salary) as SecondHighestSalary
FROM Employee
WHERE Salary < (SELECT max(Salary) FROM Employee)

solution 3:
SELECT
    (SELECT DISTINCT
            Salary
        FROM
            Employee
        ORDER BY Salary DESC
        LIMIT 1 OFFSET 1) AS SecondHighestSalary

# Nth Highest Salary
solution 1:
CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT
BEGIN
  RETURN (
      # Write your MySQL query statement below.
      SELECT 
        CASE WHEN COUNT(a.Salary)<N THEN null  
        ELSE MIN(a.Salary) END 
      FROM 
        (SELECT DISTINCT Employee.Salary FROM Employee ORDER BY Employee.Salary DESC LIMIT N) a
  );
END

solution 2:
CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT
BEGIN
    set n = n - 1;
  RETURN (
      # Write your MySQL query statement below.
      select distinct Salary from Employee order by Salary desc limit 1 offset n
  );
END

# rank scores
solution 1: (prev and next are keywords, indicating the previous or next row of record)
SELECT
  Score,
  @rank := @rank + (@prev <> (@prev := Score)) Rank
FROM
  Scores,
  (SELECT @rank := 0, @prev := -1) init
ORDER BY Score desc

solution 2:
select Score, DENSE_RANK() OVER (ORDER BY Score Desc) Rank from Scores

# Consecutive Numbers: Write a SQL query to find all numbers that appear at least three times consecutively.

select distinct ConsecutiveNums from (
    select 
        Num as ConsecutiveNums,
        Case 
            When @prev = Num Then @count := @count + 1 Else @count := 1
        End as count,
        @prev := Num
        from (
            select @prev := null, @count := null
        ) as pre, Logs l) Consecutive
where count >= 3

# return duplicates

select email
from 
(select email,count(id)as email_count from person
group by email
having count(email)>1)t

# customers who never order

solution 1:
SELECT a.Name AS Customers
FROM
(SELECT c.Name AS Name,o.CustomerId AS CustomerId
FROM Customers c LEFT JOIN Orders o
ON c.Id=o.CustomerId) a
WHERE a.CustomerId IS NULL

solution 2 (better):
select Customers.Name as 'Customers'
from Customers
where Customers.Id not in (
    select Orders.CustomerID
    from Orders
)


# Department Top Three Salaries

SELECT
    d.Name AS 'Department', e1.Name AS 'Employee', e1.Salary
FROM
    Employee e1
        JOIN
    Department d ON e1.DepartmentId = d.Id
WHERE
    3 > (SELECT
            COUNT(DISTINCT e2.Salary)
        FROM
            Employee e2
        WHERE
            e2.Salary > e1.Salary
                AND e1.DepartmentId = e2.DepartmentId
        )
;

# Delete Duplicate Emails and only keep the Email with smaller Id

DELETE p2
FROM Person p1 INNER JOIN Person p2
WHERE p1.Id<p2.Id AND p1.Email=p2.Email 


# Rising Temperature: Given a Weather table, write a SQL query to find all dates' Ids with higher temperature compared to its previous (yesterday's) dates.

SELECT w1.Id FROM
Weather w1, Weather w2
WHERE DATEDIFF(w1.RecordDate,w2.RecordDate) =1 AND w1.Temperature>w2.Temperature

# Update table by swapping the sex value

UPDATE salary
SET sex = (CASE WHEN sex='m' THEN 'f' ELSE 'm' END)

# Exchange seats

SELECT 
	Case When id in (SELECT max(id) as id from seat ) and id%2=1 then id
			 When id % 2=0 Then id-1
			 When id % 2 =1 Then id +1
  End as id, student
FROM seat 
Order By id ASC

# Human Traffic of Stadium: three consecutive rows with number greater than 100

SELECT s1.* FROM stadium AS s1, stadium AS s2, stadium as s3
    WHERE 
    ((s1.id + 1 = s2.id
    AND s1.id + 2 = s3.id)
    OR 
    (s1.id - 1 = s2.id
    AND s1.id + 1 = s3.id)
    OR
    (s1.id - 2 = s2.id
    AND s1.id - 1 = s3.id)
    )
    AND s1.people>=100 
    AND s2.people>=100
    AND s3.people>=100

    GROUP BY s1.id

    